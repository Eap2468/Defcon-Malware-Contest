.code
strlen_custom proc
	xor rax, rax

Null_Check:
	cmp byte ptr [rcx + rax], 0
	je End_Of_String
	inc rax
	jmp Null_Check

End_Of_String:
	ret
strlen_custom endp

strcmp_custom proc
	xor rax, rax
Check:
	cmp rdx, 0
	je Equal

	mov al, byte ptr [rcx]
	cmp al, byte ptr [r8]
	jne Not_Equal

	inc rcx
	inc r8
	dec rdx
	jmp Check

Not_Equal:
	ret

Equal:
	xor rax, rax
	ret
strcmp_custom endp

wstrcmp_custom proc
	xor rax, rax
	xor rsi, rsi
Check:
	cmp rdx, 0
	je Found

	mov ax, word ptr [rcx + rsi * 2]
	cmp ax, word ptr [r8 + rsi * 2]
	jne Not_Equal

	inc rsi
	dec rdx
	jmp Check

Not_Equal:
	mov rax, 1
	ret

Found:
	xor rax, rax
	ret
wstrcmp_custom endp

wstrlen_custom proc
	xor rax, rax
	cmp rcx, 0
	je Finish
Check:
	cmp byte ptr [rcx + rax * 2], 0
	je Finish
	inc rax
	jmp Check

Finish:
	ret
wstrlen_custom endp

memset_custom proc
	xor rbx, rbx
Set:
	mov byte ptr [rcx], dl
	inc rbx
	inc rcx
	cmp rbx, r8
	jne Set
	ret
memset_custom endp

memcpy_custom proc
	cmp r8, 0
	je Exit
	xor rax, rax
Set:
	mov bl, byte ptr [rdx + rax]
	mov byte ptr [rcx + rax], bl
	inc rax
	cmp rax, r8
	jne Set
Exit:
	ret
memcpy_custom endp

strcpy_custom proc
	push rbp
	mov rbp, rsp
	sub rsp, 40h
	
	mov [rbp - 8h], rcx
	mov [rbp - 10h], rdx
	
	mov rcx, rdx
	call strlen_custom

	mov rcx, rax
	mov rdi, [rbp - 8h]
	mov rsi, [rbp - 10h]
	rep movsb

	add rsp, 40h
	leave
	ret
strcpy_custom endp
end