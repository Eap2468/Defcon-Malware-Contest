#pragma once
#include "Types.h"
#include "String.h"
#include <windows.h>

extern "C" DWORD GetSyscallNumber(uintptr_t uiFunctionAddress);
extern "C" void LoadSyscall(DWORD syscall_number);
extern "C" void* ExecuteSyscall();
extern "C" uintptr_t GetModuleBaseAddress(const char* module_name);
extern "C" uintptr_t GetFuncAddress(uintptr_t module_base, const char* func_name);

static uintptr_t ntdll = 0;
static char ntdll_str[11] = "JP@HH\x0a@HH";

typedef WinDEF::NTSTATUS (NTAPI* NtAllocateVirtualMemoryTemplate)(
    HANDLE ProcessHandle,
    PVOID* BaseAddress,
    ULONG_PTR ZeroBits,
    SIZE_T* RegionSize,
    ULONG AllocationType,
    ULONG Protect
);
static NtAllocateVirtualMemoryTemplate NtAllocateVirtualMemoryAddress = 0;

typedef NTSTATUS (NTAPI* NtOpenKeyTemplate)(
    HANDLE* KeyHandle,
    ACCESS_MASK DesiredAccess,
    WinDEF::OBJECT_ATTRIBUTES* ObjectAttributes
);
static NtOpenKeyTemplate NtOpenKeyAddress = 0;

typedef NTSTATUS (NTAPI* NtQueryValueKeyTemplate)(
    HANDLE KeyHandle,
    WinDEF::UNICODE_STRING* ValueName,
    WinDEF::KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
    PVOID KeyValueInformation,
    ULONG Length,
    ULONG* ResultLength
);
static NtQueryValueKeyTemplate NtQueryValueKeyAddress = 0;

typedef NTSTATUS (NTAPI* NtCloseTemplate)(
    HANDLE Handle
);
static NtCloseTemplate NtCloseAddress = 0;

typedef NTSTATUS (NTAPI* NtCreateFileTemplate)(
    HANDLE* FileHandle,
    ACCESS_MASK DesiredAccess,
    WinDEF::OBJECT_ATTRIBUTES* ObjectAttributes,
    WinDEF::IO_STATUS_BLOCK* IoStatusBlock,
    LARGE_INTEGER* AllocationSize,
    ULONG FileAttributes,
    ULONG ShareAccess,
    ULONG CreateDisposition,
    ULONG CreateOptions,
    PVOID EaBuffer,
    ULONG EaLength
);
static NtCreateFileTemplate NtCreateFileAddress = 0;

typedef NTSTATUS (NTAPI* NtReadFileTemplate)(
    HANDLE FileHandle,
    HANDLE Event,
    WinDEF::PIO_APC_ROUTINE* ApcRoutine,
    PVOID ApcContext,
    WinDEF::IO_STATUS_BLOCK* IoStatusBlock,
    PVOID Buffer,
    ULONG Length,
    LARGE_INTEGER* ByteOffset,
    ULONG* Key
);
static NtReadFileTemplate NtReadFileAddress = 0;

typedef NTSTATUS (NTAPI* NtFreeVirtualMemoryTemplate)(
    HANDLE ProcessHandle,
    PVOID* BaseAddress,
    SIZE_T* RegionSize,
    ULONG FreeType
);
static NtFreeVirtualMemoryTemplate NtFreeVirtualMemoryAddress = 0;

typedef NTSTATUS (NTAPI* NtOpenProcessTemplate)(
    HANDLE* ProcessHandle,
    ACCESS_MASK DesiredAccess,
    WinDEF::OBJECT_ATTRIBUTES* ObjectAttributes,
    WinDEF::PCLIENT_ID ClientId
);
static NtOpenProcessTemplate NtOpenProcessAddress = 0;

typedef NTSTATUS (NTAPI* NtQuerySystemInformationTemplate)(
    WinDEF::SYSTEM_INFORMATION_CLASS SystemInformationClass,
    PVOID SystemInformation,
    ULONG SystemInformationLength,
    ULONG* ReturnLength
);
static NtQuerySystemInformationTemplate NtQuerySystemInformationAddress = 0;

typedef NTSTATUS (NTAPI* NtReadVirtualMemoryTemplate)(
    HANDLE ProcessHandle,
    PVOID BaseAddress,
    PVOID Buffer,
    SIZE_T BufferSize,
    SIZE_T* NumberOfBytesRead
);
static NtReadVirtualMemoryTemplate NtReadVirtualMemoryAddress = 0;

typedef NTSTATUS (NTAPI* NtQueryVirtualMemoryTemplate)(
    HANDLE ProcessHandle,
    PVOID BaseAddress,
    WinDEF::MEMORY_INFORMATION_CLASS MemoryInformationClass,
    PVOID MemoryInformation,
    SIZE_T MemoryInformationLength,
    SIZE_T* ReturnLength
);
static NtQueryVirtualMemoryTemplate NtQueryVirtualMemoryAddress = 0;

namespace NT
{
    NTSTATUS NtAllocateVirtualMemory(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, SIZE_T* RegionSize, ULONG AllocationType, ULONG Protect);
    NTSTATUS NtOpenKey(HANDLE* KeyHandle, ACCESS_MASK DesiredAccess, WinDEF::OBJECT_ATTRIBUTES* ObjectAttributes);
    NTSTATUS NtQueryValueKey(HANDLE KeyHandle, WinDEF::UNICODE_STRING* ValueName, WinDEF::KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, ULONG* ResultLength);
    NTSTATUS NtClose(HANDLE Handle);
    NTSTATUS NtCreateFile(HANDLE* FileHandle, ACCESS_MASK DesiredAccess, WinDEF::OBJECT_ATTRIBUTES* ObjectAttributes, WinDEF::IO_STATUS_BLOCK* IoStatusBlock, LARGE_INTEGER* AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);
    NTSTATUS NtReadFile(HANDLE FileHandle, HANDLE Event, WinDEF::PIO_APC_ROUTINE* ApcRoutine, PVOID ApcContext, WinDEF::IO_STATUS_BLOCK* IoStatusBlock, PVOID Buffer, ULONG Length, LARGE_INTEGER* ByteOffset, ULONG* Key);
    NTSTATUS NtFreeVirtualMemory(HANDLE ProcessHandle, PVOID* BaseAddress, SIZE_T* RegionSize, ULONG FreeType);
    NTSTATUS NtOpenProcess(HANDLE* ProcessHandle, ACCESS_MASK DesiredAccess, WinDEF::OBJECT_ATTRIBUTES* ObjectAttributes, WinDEF::PCLIENT_ID ClientId);
    NTSTATUS NtQuerySystemInformation(WinDEF::SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, ULONG* ReturnLength);
    NTSTATUS NtQueryVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, WinDEF::MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, SIZE_T* ReturnLength);
    NTSTATUS NtReadVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, SIZE_T* NumberOfBytesRead);
    void RtlInitUnicodeString(WinDEF::UNICODE_STRING* unistr, const wchar_t* str);
}
